		Marvell CN9XXX BSP


1. About this document
======================
This document describes the common and non-hardware specific information.
Please refer to README.hardware for hardware specific information.

Dependencies
------------
This layer depends on the oe-core version supplied with linux-yocto kernel.

Maintenance
-----------
This layer is maintained by Wind River Systems, Inc.
Contact <support@windriver.com> or your support representative for more
information on submitting changes.

Building the marvell-cn9xxx layer
---------------------------------
This layer should be added to bblayers.conf. This is done automatically
when using the Wind River setup.sh wrapper.

License
-------
Copyright (C) 2023 Wind River Systems, Inc.

The right to copy, distribute or otherwise make use of this software may
be licensed only pursuant to the terms of an applicable Wind River license
agreement. No license to Wind River intellectual properly rights is granted
herein. All rights not licensed by Wind River are reserved by Wind River.

Source code included in tree for individual recipes is under the LICENSE
stated in each recipe (.bb file) unless other stated.


2. BSP Kernel and Distros
=========================

The following table summarizes the valid Wind River Linux distros for this BSP.
'Y' in each content cell stands for supported; 'N' stands for not supported:

  +--------------+-------------+------------------+-------------------+--------------+
  | valid/distro |   wrlinux   | wrlinux-graphics | wrlinux-installer | wrlinux-tiny |
  +--------------+-------------+------------------+-------------------+--------------+
  |    valid     |      Y      |        N         |         N         |       N      |
  +--------------+-------------+------------------+-------------------+--------------+

For the supported kernel type for this BSP, please check the TARGET_SUPPORTED_KTYPES
by running 'bitbake -e virtual/kernel | grep "^TARGET_SUPPORTED_KTYPES="'.

Note: The preempt-rt ktype is available for this BSP/Machine.


3. Board Specific Patches
=========================

To get a list of patches applied to the kernel specific to this BSP along with
patch descriptions use git-whatchanged on the default kernel. For example:

	%> cd tmp-glibc/work-shared/<bsp_name>/kernel-source
	%> git whatchanged <kernel_version>/standard/base..<kernel_version>/standard/<bsp_name>


4. Boot Instructions
====================

The typical u-boot settings apply to these boards. You will need to use
setenv, printenv and saveenv, to configure, display and store respectively
your network configuration details and kernel command line. In order to
TFTP a kernel, you need at a minimum to set the following:

	- ipaddr
	- gatewayip
	- netmask
	- serverip
	- loadaddr
	- dtbfile
	- dtbaddr
	- ethaddr
	- eth1addr

Your board may ship with the values for the MAC address of
the Ethernet interfaces set to the defaults compiled into the
u-boot image.  You should set the ethaddr, eth1addr and so on
as per the manufacturer assigned values, usually indicated with
a sticker on the board.

Target specifics are usually set in the "bootargs" variable, and the
kernel image is set in the "bootfile" variable. Don't forget that if you
want these values to be available after a power cycle you will need to run
the saveenv command.

Typically convenience macros exist that will create a complete bootargs
command line for the kernel based on variables that contain individual
settings.  Since these macros exist as env variables themselves, they
may or may not be present depending on who installed and configured
u-boot for the board.

The console device for the board is ttyAMA0 at 115200 baud. The load address
must be high enough to not interfere with kernel decompression.  A value of
0x040080000 was used with success for all kernels tested by Wind River.

4.1 NFS Root File System
------------------------

Example settings for the monitor (u-boot) are shown below:

nfsboot=setenv bootargs root=/dev/nfs rw nfsroot=$serverip:$rootpath \
ip=$ipaddr:$serverip:$gatewayip:$netmask:$hostname:$netdev:off \
console=$consoledev,$baudrate $othbootargs;tftpboot $loadaddr $bootfile; \
booti $loadaddr - $fdtaddr
ethaddr=00:04:9F:02:00:FD
eth1addr=00:04:9F:02:01:FD
eth2addr=00:04:9F:02:02:FD
loadaddr=0x040080000
gatewayip=192.168.1.1
netmask=255.255.255.0
ipaddr=192.168.1.100
serverip=192.168.1.2
netdev=eth1
ethact=eth1
bootfile=Image
rootpath=/tftpboot/rootfs
consoledev=ttyAMA0
baudrate=115200


5. WIC Image
============
Please refer to the Yocto manual for the detailed info about WIC. After building
the project, the WIC image is at:
   tmp-glibc/deploy/images/marvell-cn96xx/wrlinux-image-glibc-std-<machine name>.wic

Then user can burn this image to a SD card.

5.1 Burn the image to SD card
-----------------------------
    # dd if=wrlinux-image-glibc-std-<machine name>.wic of=/dev/your_sd_dev bs=1M conv=fsync

5.2 Boot from the SD card
-------------------------
    If you want to boot from the SD card, you also need to burn the boot image
    to the SD card. There are two methods to support SD card startup:

    1. Before compiling, place the boot image file (octeontx-bootfs-uboot-t96.img)
       into one folder, then add one line below to local.conf:

	    BOOT_IMAGE_DIR = "<folder-containing-boot-image>"

       after running the bitbake command, the WIC image will contain the boot image.

    Note: The default boot image name is 'octeontx-bootfs-uboot-t96.img', if use
	  a different file name, add following line to local.conf:

	    BOOT_IMAGE = "<your-boot-image-name>"

    2. Use the following command to burn the boot image after burning the WIC image:
	dd if=octeontx-bootfs-uboot-t96.img of=/dev/your_sd_dev bs=512 seek=128 skip=128 conv=fsync

    Note: Please contact the Marvell for the cn96xx boot image.

5.3 Set uboot env for cn96xx
----------------------------
    # setenv loadaddr 0x040080000
    # fatload mmc 0:2 $loadaddr Image
    # setenv bootargs console=ttyAMA0,115200 root=/dev/mmcblk0p3 maxcpus=24 rootwait coherent_pool=16M net.ifnames=0
    # booti $loadaddr - $fdtaddr


6. Coresight Support
====================
The non invasive debug is disabled by default on the cn96xx board, so we have to
override the default reset value by updating the DAP_IMP_DAR register. Run the
following command in the u-boot before booting the linux kernel.
    CN96XX-CRB> mw 87e002000100 0x23f

The following steps can be used to validate the coresight on cn96xx:
    ~# cat /sys/bus/coresight/devices/etm0/ns_exlevel_vinst
    0x0
    ~# echo 1 >/sys/bus/coresight/devices/tmc_etr0/enable_sink
    ~# echo 1 >/sys/bus/coresight/devices/etm0/enable_source
    ~# taskset -c 0 ls /bin/
    '['                                            lsattr
    '[['                                                   lsblk
     aarch64-marvell-linux-gnu-ar                          lscpu
     aarch64-marvell-linux-gnu-as                          lsipc
     aarch64-marvell-linux-gnu-c++                         lslocks
     aarch64-marvell-linux-gnu-g++                         lsns
     aarch64-marvell-linux-gnu-gcc                         lsof
    ...

    ~# mkdir otx2
    ~# dd if=/dev/tmc_etr0 of=/root/otx2/cstrace.bin
    5455+2 records in
    5456+0 records out
    2793472 bytes (2.8 MB, 2.7 MiB) copied, 1.25005 s, 2.2 MB/s
    [  501.297766] Writes:  Total: 89823307  Max/Min: 2278047/1702147   Fail: 0
    ~# echo 0 >/sys/bus/coresight/devices/tmc_etr0/enable_sink
    ~# echo 0 >/sys/bus/coresight/devices/etm0/enable_source
    ~# c_api_pkt_print_test -ss_path /root/
    Decoding otx2 snapshot ...
    opening /root//otx2/cstrace.bin trace data file
    C-API packet print test
    Library Version 0.12.2

    c_api_pkt_print_test -ss_path /root/

    Idx:0; I_NOT_SYNC : I Stream not synchronised
    Idx:262840; I_ASYNC : Alignment Synchronisation.
    Idx:262852; I_TRACE_INFO : Trace Info.; INFO=0x0 { CC.0 }
    Idx:262855; I_TRACE_ON : Trace On.
    Idx:262856; I_CTXT : Context Packet.; Ctxt: AArch64,EL2, NS;
    Idx:262858; I_TRACE_ON : Trace On.
    Idx:262859; I_CTXT : Context Packet.; Ctxt: AArch64,EL2, NS;
    Idx:262861; I_ADDR_L_64IS0 : Address, Long, 64 bit, IS0.; Addr=0xFFFF800010872CD0;
    Idx:262870; I_ATOM_F1 : Atom format 1.; E
    Idx:262871; I_ADDR_L_32IS0 : Address, Long, 32 bit, IS0.; Addr=0xFFFF800010CD57E0;
    ...

7. EDAC/GHES Support
====================
The following steps can be used to validate the EDAC/GHES on cn96xx:
    ~# echo 0x800000 > /sys/devices/system/edac/mc/mc0/address
    ~# echo 0x40000300 > /sys/devices/system/edac/mc/mc0/error_type
    ~# echo 1 > /sys/devices/system/edac/mc/mc0/inject

An example output is as follows:
    EDAC octeontx: octeontx_edac_mc_inject_error c2000c0b 3 800000 200 0 0 0 0
    Injected error va:0x800000, pa:0x800000, lmc1 (mcc0)
    LMCDA Doct Entx: ocle (Dx_M0aRamk0/0,Bctk0r,Rr: 0c0000c0bol3, 0050,F, X=0, YN=exce)?0x800000? (Secure)
    EDAC octeontx: mcc:[40000001] tail=0, head=1, size=17
    EDAC MC0: 1 CE LMC1: DIMM0,Rank0/0,Bank05 on  (card:1 module:0 bank:5 row:21 col:336 page:0x80 offset:0x0 grain:1 syndrome:0x0)
